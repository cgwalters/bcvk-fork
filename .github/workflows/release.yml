name: Release

on:
  pull_request:
    types: [closed]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.arch }}
    if: |
      (github.event_name == 'pull_request' &&
       github.event.pull_request.merged == true &&
       contains(github.event.pull_request.labels.*.name, 'release'))
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            arch: x86_64
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            arch: aarch64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y just pkg-config go-md2man libssl-dev
          # Install cross-compilation target if needed
          if [ "${{ matrix.target }}" != "$(rustc -vV | grep host | cut -d' ' -f2)" ]; then
            rustup target add ${{ matrix.target }}
          fi

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          key: release-build-${{ matrix.target }}

      - name: Build and archive
        run: |
          # Set the target architecture
          export CARGO_BUILD_TARGET=${{ matrix.target }}
          just build
          just archive
        env:
          CARGO_PROFILE_RELEASE_LTO: true
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_BUILD_TARGET: ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bcvk-${{ matrix.arch }}-binary
          path: |
            target/bcvk-*.tar.gz
            target/bcvk-*.tar.gz.sha256
          retention-days: 1

  create-release:
    name: Create Release
    needs: build
    if: |
      (github.event_name == 'pull_request' &&
       github.event.pull_request.merged == true &&
       contains(github.event.pull_request.labels.*.name, 'release'))
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract version
        id: extract_version
        run: |
          # Extract version from crates/kit/Cargo.toml
          VERSION=$(cargo read-manifest --manifest-path crates/kit/Cargo.toml | jq -r '.version')

          # Validate version format
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' >/dev/null; then
            echo "Error: Invalid version format in Cargo.toml: $VERSION"
            exit 1
          fi

          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_NAME=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          TAG_NAME="v$VERSION"

          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists"
            exit 0
          fi

          git tag -a -m "Release $VERSION" "$TAG_NAME"
          git push origin "$TAG_NAME"

          echo "Successfully created and pushed tag $TAG_NAME"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          TAG_NAME="${{ steps.extract_version.outputs.TAG_NAME }}"
          PRERELEASE=""
          if [[ "$VERSION" == *"-"* ]]; then
            PRERELEASE="--prerelease"
          fi
          
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "Release $TAG_NAME
          
          ## Installation
          
          Download the appropriate binary for your platform from the assets below.
          
          ### Linux (glibc)
          \`\`\`bash
          ARCH=$(arch)
          curl -LO https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/bcvk-${ARCH}-unknown-linux-gnu.tar.gz
          tar xzf bcvk-${ARCH}-unknown-linux-gnu.tar.gz
          sudo mv bcvk-${ARCH}-unknown-linux-gnu /usr/local/bin/bcvk
          \`\`\`
          
          ## Checksums
          
          Verify the integrity of your download with the provided SHA256 checksums.
          " \
          $PRERELEASE

      - name: Upload to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            for file in bcvk-*.tar.gz bcvk-*.tar.gz.sha256; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                gh release upload "${{ steps.extract_version.outputs.TAG_NAME }}" "$file" --clobber
              fi
            done
            cd ..
          done